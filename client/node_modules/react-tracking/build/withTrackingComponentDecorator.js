"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withTrackingComponentDecorator;
exports.TrackingContextType = void 0;

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.object.assign");

require("core-js/modules/es6.object.define-property");

require("core-js/modules/es6.object.create");

require("core-js/modules/es6.object.set-prototype-of");

require("core-js/modules/es6.function.name");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var _dispatchTrackingEvent = _interopRequireDefault(require("./dispatchTrackingEvent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var TrackingContextType = _propTypes.default.shape({
  data: _propTypes.default.object,
  dispatch: _propTypes.default.func,
  process: _propTypes.default.func
});

exports.TrackingContextType = TrackingContextType;

function withTrackingComponentDecorator() {
  var trackingData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$dispatch = _ref.dispatch,
      dispatch = _ref$dispatch === void 0 ? _dispatchTrackingEvent.default : _ref$dispatch,
      _ref$dispatchOnMount = _ref.dispatchOnMount,
      dispatchOnMount = _ref$dispatchOnMount === void 0 ? false : _ref$dispatchOnMount,
      process = _ref.process;

  return function (DecoratedComponent) {
    var decoratedComponentName = DecoratedComponent.displayName || DecoratedComponent.name || 'Component';

    var WithTracking =
    /*#__PURE__*/
    function (_Component) {
      _inherits(WithTracking, _Component);

      function WithTracking(props, context) {
        var _this;

        _classCallCheck(this, WithTracking);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(WithTracking).call(this, props, context));

        _this.trackEvent = function (data) {
          _this.getTrackingDispatcher()( // deep-merge tracking data from context and tracking data passed in here
          (0, _deepmerge.default)(_this.trackingData || {}, data || {}));
        };

        if (context.tracking && context.tracking.process && process) {
          // eslint-disable-next-line
          console.error('[react-tracking] options.process should be used once on top level component');
        }

        _this.computeTrackingData(props, context);

        _this.tracking = {
          trackEvent: _this.trackEvent,
          getTrackingData: function getTrackingData() {
            return _this.trackingData;
          }
        };
        return _this;
      }

      _createClass(WithTracking, [{
        key: "getChildContext",
        value: function getChildContext() {
          var tracking = this.context.tracking;
          return {
            tracking: {
              data: (0, _deepmerge.default)(this.contextTrackingData || {}, this.ownTrackingData || {}),
              dispatch: this.getTrackingDispatcher(),
              process: tracking && tracking.process || process
            }
          };
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var tracking = this.context.tracking;
          var contextProcess = tracking && tracking.process;

          if (typeof contextProcess === 'function' && typeof dispatchOnMount === 'function') {
            this.trackEvent((0, _deepmerge.default)(contextProcess(this.ownTrackingData) || {}, dispatchOnMount(this.trackingData) || {}));
          } else if (typeof contextProcess === 'function') {
            var processed = contextProcess(this.ownTrackingData);

            if (processed || dispatchOnMount === true) {
              this.trackEvent(processed);
            }
          } else if (typeof dispatchOnMount === 'function') {
            this.trackEvent(dispatchOnMount(this.trackingData));
          } else if (dispatchOnMount === true) {
            this.trackEvent();
          }
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps, nextContext) {
          this.computeTrackingData(nextProps, nextContext);
        }
      }, {
        key: "getTrackingDispatcher",
        value: function getTrackingDispatcher() {
          var tracking = this.context.tracking;
          return tracking && tracking.dispatch || dispatch;
        }
      }, {
        key: "computeTrackingData",
        value: function computeTrackingData(props, context) {
          this.ownTrackingData = typeof trackingData === 'function' ? trackingData(props) : trackingData;
          this.contextTrackingData = context.tracking && context.tracking.data || {};
          this.trackingData = (0, _deepmerge.default)(this.contextTrackingData || {}, this.ownTrackingData || {});
        }
      }, {
        key: "render",
        value: function render() {
          return _react.default.createElement(DecoratedComponent, _extends({}, this.props, {
            tracking: this.tracking
          }));
        }
      }]);

      return WithTracking;
    }(_react.Component);

    WithTracking.displayName = "WithTracking(".concat(decoratedComponentName, ")");
    WithTracking.contextTypes = {
      tracking: TrackingContextType
    };
    WithTracking.childContextTypes = {
      tracking: TrackingContextType
    };
    (0, _hoistNonReactStatics.default)(WithTracking, DecoratedComponent);
    return WithTracking;
  };
}